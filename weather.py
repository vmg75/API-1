import requests
from dotenv import load_dotenv
import os
import json
import time
from datetime import datetime, timedelta
from typing import Dict, Optional, Tuple

load_dotenv()
OPENWEATHER_API_KEY = os.getenv("OW_API_KEY")
CACHE_DIR = "cache"
GEOCODING_CACHE = os.path.join(CACHE_DIR, "weather_geocoding.json")
CURRENT_CACHE = os.path.join(CACHE_DIR, "weather_current.json")
FORECAST_CACHE = os.path.join(CACHE_DIR, "weather_forecast.json")
AIR_POLLUTION_CACHE = os.path.join(CACHE_DIR, "weather_air_pollution.json") 
COUNT_3_HOURS_FORECAST = 40 # 24 hours / 3 hours = 8 forecasts
COUNT_DAILY_FORECAST = 7 # 7 days

if not OPENWEATHER_API_KEY:
    print("‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á OpenWeather –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ:")
    print("OW_API_KEY=–≤–∞—à_api_–∫–ª—é—á")
    exit(1)
else:
    print(f"‚úÖ API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω: {OPENWEATHER_API_KEY[:8]}...")


AIR_QUALITY_SCALE = [
    {
        "name_ru": "–•–æ—Ä–æ—à–µ–µ",
        "index": 1,
        "pollutants": {
            "SO2": (0, 20),
            "NO2": (0, 40),
            "PM10": (0, 20),
            "PM2_5": (0, 10),
            "O3": (0, 60),
            "CO": (0, 4400),
        }
    },
    {
        "name_ru": "–£–º–µ—Ä–µ–Ω–Ω–æ–µ",
        "index": 2,
        "pollutants": {
            "SO2": (20, 80),
            "NO2": (40, 70),
            "PM10": (20, 50),
            "PM2_5": (10, 25),
            "O3": (60, 100),
            "CO": (4400, 9400),
        }
    },
    {
        "name_ru": "–°—Ä–µ–¥–Ω–µ–µ",
        "index": 3,
        "pollutants": {
            "SO2": (80, 250),
            "NO2": (70, 150),
            "PM10": (50, 100),
            "PM2_5": (25, 50),
            "O3": (100, 140),
            "CO": (9400, 12400),
        }
    },
    {
        "name_ru": "–ü–ª–æ—Ö–æ–µ",
        "index": 4,
        "pollutants": {
            "SO2": (250, 350),
            "NO2": (150, 200),
            "PM10": (100, 200),
            "PM2_5": (50, 75),
            "O3": (140, 180),
            "CO": (12400, 15400),
        }
    },
    {
        "name_ru": "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ",
        "index": 5,
        "pollutants": {
            "SO2": (350, float('inf')),
            "NO2": (200, float('inf')),
            "PM10": (200, float('inf')),
            "PM2_5": (75, float('inf')),
            "O3": (180, float('inf')),
            "CO": (15400, float('inf')),
        }
    },
]

def load_cache(cache_file: str) -> Dict:
    """Load cache from specified file."""
    try:
        if os.path.exists(cache_file):
            with open(cache_file, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞ {cache_file}: {e}")
    return {}


def save_cache(cache_data: Dict, cache_file: str) -> None:
    """Save cache data to specified file."""
    try:
        # Ensure cache directory exists
        os.makedirs(os.path.dirname(cache_file), exist_ok=True)
        with open(cache_file, 'w', encoding='utf-8') as f:
            json.dump(cache_data, f, indent=2, ensure_ascii=False)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞ {cache_file}: {e}")


def filter_local_names(data: Dict) -> Dict:
    """Filter local_names to keep only RU and EN languages."""
    if 'local_names' in data and isinstance(data['local_names'], dict):
        filtered = {}
        for lang in ['ru', 'en']:
            if lang in data['local_names']:
                filtered[lang] = data['local_names'][lang]
        data['local_names'] = filtered
    return data


def is_cache_valid(cache_entry: Dict) -> bool:
    """Check if cache entry is valid (less than 3 hours old)."""
    if not cache_entry or 'fetched_at' not in cache_entry:
        return False
    
    try:
        fetched_time = datetime.fromisoformat(cache_entry['fetched_at'])
        return datetime.now() - fetched_time < timedelta(hours=3)
    except:
        return False


def get_cache_key(city: str = None, lat: float = None, lon: float = None) -> str:
    """Generate cache key based on location."""
    if city:
        return f"city:{city.lower()}"
    elif lat is not None and lon is not None:
        return f"coords:{lat:.2f},{lon:.2f}"
    return ""


def make_api_request_with_retry(url: str, max_retries: int = 3) -> Tuple[bool, Dict]:
    """Make API request with exponential backoff retry logic."""
    for attempt in range(max_retries):
        try:
            response = requests.get(url, timeout=10)
            
            if response.status_code == 429:  # Rate limit
                if attempt < max_retries - 1:
                    wait_time = 2 ** attempt  # 1s, 2s, 4s
                    print(f"Rate limit hit. Waiting {wait_time}s before retry {attempt + 1}/{max_retries}")
                    time.sleep(wait_time)
                    continue
                else:
                    return False, {"error": "Rate limit exceeded after retries"}
            
            response.raise_for_status()
            return True, response.json()
            
        except requests.exceptions.Timeout:
            if attempt < max_retries - 1:
                wait_time = 2 ** attempt
                print(f"Timeout. Retrying in {wait_time}s...")
                time.sleep(wait_time)
                continue
            else:
                return False, {"error": "Request timeout after retries"}
                
        except requests.exceptions.ConnectionError:
            if attempt < max_retries - 1:
                wait_time = 2 ** attempt
                print(f"Connection error. Retrying in {wait_time}s...")
                time.sleep(wait_time)
                continue
            else:
                return False, {"error": "Connection failed after retries"}
                
        except requests.exceptions.RequestException as e:
            return False, {"error": f"Request failed: {str(e)}"}
    
    return False, {"error": "Max retries exceeded"}


def get_cities_list(city: str) -> Dict:
    """Get list of cities matching the search query."""
    if not OPENWEATHER_API_KEY:
        return {"error": "API –∫–ª—é—á OpenWeather –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
    
    # Make API request
    url = f"https://api.openweathermap.org/geo/1.0/direct?q={city}&limit=5&appid={OPENWEATHER_API_KEY}"
    success, geo_data = make_api_request_with_retry(url)
    
    if not success:
        return {"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞"}
    
    if not geo_data or len(geo_data) == 0:
        return {"error": "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    
    # Format cities list for display
    cities_list = []
    for entry in geo_data:
        city_name = entry.get('name', '')
        country = entry.get('country', '')
        state = entry.get('state', None)
        display_name = f"{city_name}"
        if state:
            display_name += f", {state}"
        display_name += f", {country}"
        
        cities_list.append({
            "name": city_name,
            "display_name": display_name,
            "country": country,
            "state": state,
            "lat": entry.get("lat"),
            "lon": entry.get("lon"),
            "data": entry
        })
    
    return {"cities": cities_list}


def get_coordinates_by_city(city: str) -> Dict:
    """Get coordinates by city name with caching."""
    if not OPENWEATHER_API_KEY:
        return {"error": "API –∫–ª—é—á OpenWeather –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
    
    cache_key = get_cache_key(city=city)
    cache = load_cache(GEOCODING_CACHE)
    
    # Check cache first
    if cache_key in cache and is_cache_valid(cache[cache_key]):
        print("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞")
        return cache[cache_key]['data']
    
    # Make API request
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–æ–∫–æ–¥–∏–Ω–≥ API –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–∞
    url = f"https://api.openweathermap.org/geo/1.0/direct?q={city}&limit=5&appid={OPENWEATHER_API_KEY}"
    success, geo_data = make_api_request_with_retry(url)
    
    if not success:
        # Try to use cache if API fails
        if cache_key in cache:
            print("üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞:")
            return cache[cache_key]['data']
        return geo_data
    
    if not geo_data or len(geo_data) == 0:
        return {"error": "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"}

    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–æ–≤, –¥–∞—ë–º –≤—ã–±–æ—Ä
    if len(geo_data) > 1:
        print("üîé –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–æ–≤. –£—Ç–æ—á–Ω–∏—Ç–µ –≤—ã–±–æ—Ä:")
        for i, entry in enumerate(geo_data, 1):
            city_name = entry.get('name', '')
            country = entry.get('country', '')
            state = entry.get('state', None)
            display_name = f"{city_name}"
            if state:
                display_name += f", {state}"
            display_name += f", {country}"
            print(f"{i}. {display_name}")
        
        while True:
            try:
                user_choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–æ—Ä–æ–¥–∞: ")) - 1
                if 0 <= user_choice < len(geo_data):
                    chosen = geo_data[user_choice]
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            except Exception:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")
    else:
        chosen = geo_data[0]

    # Filter local_names and save to cache
    chosen = filter_local_names(chosen)
    cache[cache_key] = {
        "city": city,
        "lat": chosen.get("lat"),
        "lon": chosen.get("lon"),
        "fetched_at": datetime.now().isoformat(),
        "data": chosen
    }
    save_cache(cache, GEOCODING_CACHE)
    
    return chosen


def get_city_by_coordinates(lat: float, lon: float) -> Dict:
    """Get city by coordinates with caching."""
    if not OPENWEATHER_API_KEY:
        return {"error": "API –∫–ª—é—á OpenWeather –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
    
    cache_key = get_cache_key(lat=lat, lon=lon)
    cache = load_cache(GEOCODING_CACHE)
    
    # Check cache first
    if cache_key in cache and is_cache_valid(cache[cache_key]):
        print("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞")
        return cache[cache_key]['data']
    
    # Make API request
    url = f"https://api.openweathermap.org/geo/1.0/reverse?lat={lat}&lon={lon}&limit=1&appid={OPENWEATHER_API_KEY}"
    success, data = make_api_request_with_retry(url)
    
    if not success:
        # Try to use cache if API fails
        if cache_key in cache:
            print("üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞:")
            return cache[cache_key]['data']
        return data
    
    if not data or len(data) == 0:
        return {"error": "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"}
    
    # Filter local_names and save to cache
    data[0] = filter_local_names(data[0])
    cache[cache_key] = {
        "city": data[0].get("name"),
        "lat": lat,
        "lon": lon,
        "fetched_at": datetime.now().isoformat(),
        "data": data[0]
    }
    save_cache(cache, GEOCODING_CACHE)
    
    return data[0]


def get_weather_by_coordinates(lat: float, lon: float) -> Dict:
    """Get weather by coordinates with caching."""
    if not OPENWEATHER_API_KEY:
        return {"error": "API –∫–ª—é—á OpenWeather –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
    
    cache_key = get_cache_key(lat=lat, lon=lon)
    cache = load_cache(CURRENT_CACHE)
    
    # Check cache first
    if cache_key in cache and is_cache_valid(cache[cache_key]):
        print("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞")
        return cache[cache_key]['data']
    
    # Make API request
    url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&units=metric&lang=ru&appid={OPENWEATHER_API_KEY}"
    success, data = make_api_request_with_retry(url)
    
    if not success:
        # Try to use cache if API fails
        if cache_key in cache:
            print("üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞:")
            return cache[cache_key]['data']
        return data
    
    # Check for API errors
    if data.get("cod") != 200:
        return {"error": data.get("message", "Unknown error from API"), "status_code": data.get("cod")}
    
    # Save to cache
    cache[cache_key] = {
        "city": data.get("name"),
        "lat": lat,
        "lon": lon,
        "fetched_at": datetime.now().isoformat(),
        "data": data
    }
    save_cache(cache, CURRENT_CACHE)
    
    return data


def get_hourly_weather(lat: float, lon: float) -> Dict:
    """Get hourly weather data for a given location."""
    if not OPENWEATHER_API_KEY:
        return {"error": "API –∫–ª—é—á OpenWeather –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –∫—ç—à–∞, —á—Ç–æ–±—ã –æ—Ç–¥–µ–ª—è—Ç—å —Ä–∞–∑–Ω—ã–µ —Ç–æ—á–∫–∏ –∏ —Ä–∞–∑–Ω—ã–µ –¥–ª–∏–Ω—ã –ø—Ä–æ–≥–Ω–æ–∑–∞:
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è lat=39.91 –∏ lon=116.39 —ç—Ç–æ –±—É–¥–µ—Ç "hourly:39.91,116.39:40"
    # –¢–∞–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –∏ –¥–ª–∏–Ω—ã –∑–∞–ø—Ä–æ—Å–∞
    cache_key = f"hourly:{lat:.2f},{lon:.2f}:{COUNT_3_HOURS_FORECAST}"
    cache = load_cache(FORECAST_CACHE)
    
    # Check cache first
    if cache_key in cache and is_cache_valid(cache[cache_key]):
        print("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞")
        return cache[cache_key]['data']
    
    # Make API request
    url = f"https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&units=metric&lang=ru&appid={OPENWEATHER_API_KEY}&cnt={COUNT_3_HOURS_FORECAST}"
    success, data = make_api_request_with_retry(url)
    
    if not success:
        # Try to use cache if API fails
        if cache_key in cache:
            print("üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞:")
            return cache[cache_key]['data']
        return data
    
    # Check for API errors
    if data.get("cod") != "200" and data.get("cod") != 200:
        return {"error": data.get("message", f"API error with code: {data.get('cod')}"), "status_code": data.get("cod")}
    
    # Save to cache
    cache[cache_key] = {
        "lat": lat,
        "lon": lon,
        "fetched_at": datetime.now().isoformat(),
        "data": data
    }
    save_cache(cache, FORECAST_CACHE)
    
    return data

def get_daily_weather(lat: float, lon: float) -> Dict:
    """Get daily weather data for a given location using 5-day forecast API."""
    if not OPENWEATHER_API_KEY:
        return {"error": "API –∫–ª—é—á OpenWeather –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
    
    cache_key = f"daily:{lat:.2f},{lon:.2f}:{COUNT_DAILY_FORECAST}"
    cache = load_cache(FORECAST_CACHE)
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if cache_key in cache and is_cache_valid(cache[cache_key]):
        print("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ (–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑)")
        return cache[cache_key]['data']
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π 5-day forecast API –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
    url = f"https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&units=metric&lang=ru&appid={OPENWEATHER_API_KEY}"
    
    success, data = make_api_request_with_retry(url)
    
    if not success:
        # –ü—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å –∏–∑ –∫—ç—à–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–µ—Ç–∏/API
        if cache_key in cache:
            print("üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º daily forecast –∏–∑ –∫—ç—à–∞")
            return cache[cache_key]['data']
        return data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É API
    if data.get("cod") != "200" and data.get("cod") != 200:
        return {"error": data.get("message", f"API error with code: {data.get('cod')}"), "status_code": data.get("cod")}
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –¥–Ω—è–º (–±–µ—Ä–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 12:00 –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è)
    daily_forecasts = []
    forecasts = data.get("list", [])
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –∏ –±–µ—Ä–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 12:00 (–∏–ª–∏ –±–ª–∏–∂–∞–π—à–∏–π –∫ –Ω–µ–º—É)
    current_date = None
    for forecast in forecasts:
        dt = datetime.fromtimestamp(forecast.get("dt", 0))
        forecast_date = dt.date()
        
        if current_date != forecast_date:
            current_date = forecast_date
            # –ë–µ—Ä–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 12:00 –∏–ª–∏ –±–ª–∏–∂–∞–π—à–∏–π –∫ –Ω–µ–º—É
            target_hour = 12
            best_forecast = None
            min_diff = float('inf')
            
            for f in forecasts:
                f_dt = datetime.fromtimestamp(f.get("dt", 0))
                if f_dt.date() == forecast_date:
                    hour_diff = abs(f_dt.hour - target_hour)
                    if hour_diff < min_diff:
                        min_diff = hour_diff
                        best_forecast = f
            
            if best_forecast:
                daily_forecasts.append(best_forecast)
                
                if len(daily_forecasts) >= COUNT_DAILY_FORECAST:
                    break
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é —Å—Ç–∞—Ä–æ–º—É API
    daily_data = {
        "city": data.get("city", {}),
        "list": daily_forecasts
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
    cache[cache_key] = {
        "lat": lat,
        "lon": lon,
        "fetched_at": datetime.now().isoformat(),
        "data": daily_data
    }
    save_cache(cache, FORECAST_CACHE)
    
    return daily_data


def get_daily_weather_by_city(city: str) -> Dict:
    """Get daily weather by city name - first get coordinates, then daily forecast."""
    # Get city coordinates
    coords_data = get_coordinates_by_city(city)
    if "error" in coords_data:
        return coords_data
    
    lat = coords_data.get("lat")
    lon = coords_data.get("lon")
    
    if lat is None or lon is None:
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞"}
    
    # Get daily forecast by coordinates
    return get_daily_weather(lat, lon)
    
def get_weather_by_city(city: str) -> Dict:
    """Get weather by city name - —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –ø–æ—Ç–æ–º –ø–æ–≥–æ–¥—É."""
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
    coords_data = get_coordinates_by_city(city)
    if "error" in coords_data:
        return coords_data
    
    lat = coords_data.get("lat")
    lon = coords_data.get("lon")
    
    if lat is None or lon is None:
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞"}
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    return get_weather_by_coordinates(lat, lon)


def get_hourly_weather_by_city(city: str) -> Dict:
    """Get hourly weather by city name - first get coordinates, then forecast."""
    # Get city coordinates
    coords_data = get_coordinates_by_city(city)
    if "error" in coords_data:
        return coords_data
    
    lat = coords_data.get("lat")
    lon = coords_data.get("lon")
    
    if lat is None or lon is None:
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞"}
    
    # Get hourly forecast by coordinates
    return get_hourly_weather(lat, lon)


def format_weather_data(data: Dict) -> str:
    """Format weather data for display."""
    if "error" in data:
        return f"‚ùå –û—à–∏–±–∫–∞: {data['error']}"
    
    try:
        location = data.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        country = data.get("sys", {}).get("country", "")
        if country:
            location += f", {country}"
        
        temp = data.get("main", {}).get("temp", 0)
        humidity = data.get("main", {}).get("humidity", 0)
        
        wind_speed = data.get("wind", {}).get("speed", 0)
        wind_deg = data.get("wind", {}).get("deg", 0)
        
        # Convert wind direction
        wind_directions = ["–°", "–°–í", "–í", "–Æ–í", "–Æ", "–Æ–ó", "–ó", "–°–ó"]
        wind_dir = wind_directions[int((wind_deg + 22.5) / 45) % 8] if wind_deg is not None else "?"
        
        weather_desc = data.get("weather", [{}])[0].get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        return f"""<code>üìç –ú–µ—Å—Ç–æ:       {location}</code>
<code>üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C</code>
<code>üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å:   {humidity}%</code>
<code>üå¨Ô∏è –í–µ—Ç–µ—Ä:       {wind_speed} –º/—Å, {wind_dir}</code>
<code>‚òÅÔ∏è –ü–æ–≥–æ–¥–∞:      {weather_desc.title()}</code>"""
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}"


def format_hourly_weather(data: Dict) -> str:
    """Format hourly weather data for display."""
    if "error" in data:
        return f"‚ùå –û—à–∏–±–∫–∞: {data['error']}"
    
    try:
        city = data.get("city", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        country = data.get("city", {}).get("country", "")
        if country:
            city += f", {country}"
        
        result = f"üìç –ú–µ—Å—Ç–æ: {city}\n"
        result += f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ {COUNT_3_HOURS_FORECAST * 3} —á–∞—Å–æ–≤ (3-—á–∞—Å–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã):\n\n"
        result += f"<code>{"–î–∞—Ç–∞/–í—Ä–µ–º—è":<11} | {"–¢–µ–º–ø.":<7} | {"–í–ª.":<4} | {"–í–µ—Ç–µ—Ä":<9} | {"–ü–æ–≥–æ–¥–∞":<15}</code>\n"
        result += "<code>" + "-"*56 + "</code>\n"
        forecasts = data.get("list", [])
        for i, forecast in enumerate(forecasts[:COUNT_3_HOURS_FORECAST]):  # Show first COUNT_3_HOURS_FORECAST forecasts
            dt = datetime.fromtimestamp(forecast.get("dt", 0))
            temp = forecast.get("main", {}).get("temp", 0)
            humidity = forecast.get("main", {}).get("humidity", 0)
            wind_speed = forecast.get("wind", {}).get("speed", 0)
            weather_desc = forecast.get("weather", [{}])[0].get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π —Å—Ç–æ–ª–±—Ü–æ–≤
            date_time = dt.strftime('%d.%m %H:%M')
            temp_str = f"{temp:.1f}¬∞C"
            humidity_str = f"{humidity}%"
            wind_str = f"{wind_speed:.1f} –º/—Å"
            weather_str = weather_desc.title()
            
            result += f"<code>{date_time:<10} | {temp_str:<7} | {humidity_str:<4} | {wind_str:<9} | {weather_str:<15}</code>\n"
        
        return result
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}"
        
def format_daily_weather(data: Dict) -> str:
    """Format daily weather data for display."""
    if "error" in data:
        return f"‚ùå –û—à–∏–±–∫–∞: {data['error']}"
    
    try:
        city = data.get("city", {}).get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        country = data.get("city", {}).get("country", "")
        if country:
            city += f", {country}"
        
        result = f"üìç –ú–µ—Å—Ç–æ: {city}\n"
        result += f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ {COUNT_DAILY_FORECAST} –¥–Ω–µ–π (–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã):\n\n"
        result += f"<code>{"–î–∞—Ç–∞":<10} | {"–¢–µ–º–ø.":<7} | {"–í–ª.":<4} | {"–í–µ—Ç–µ—Ä":<9} | {"–ü–æ–≥–æ–¥–∞":<15}</code>\n"
        result += "<code>" + "-"*56 + "</code>\n"
        forecasts = data.get("list", [])
        for i, forecast in enumerate(forecasts[:COUNT_DAILY_FORECAST]):
            dt = datetime.fromtimestamp(forecast.get("dt", 0))
            temp = forecast.get("main", {}).get("temp", 0)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º main.temp –≤–º–µ—Å—Ç–æ temp.day
            humidity = forecast.get("main", {}).get("humidity", 0)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º main.humidity
            wind_speed = forecast.get("wind", {}).get("speed", 0)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º wind.speed
            weather_desc = forecast.get("weather", [{}])[0].get("description", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π —Å—Ç–æ–ª–±—Ü–æ–≤
            date_time = dt.strftime('%d.%m')
            temp_str = f"{temp:.1f}¬∞C"
            humidity_str = f"{humidity}%"
            wind_str = f"{wind_speed:.1f} –º/—Å"
            weather_str = weather_desc.title()
            
            result += f"<code>{date_time:<10} | {temp_str:<7} | {humidity_str:<4} | {wind_str:<9} | {weather_str:<15}</code>\n"
        
        return result
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}"

def get_air_pollution(lat: float, lon: float) -> Dict:
    """Get air pollution data for a given location."""
    if not OPENWEATHER_API_KEY:
        return {"error": "API –∫–ª—é—á OpenWeather –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}
    
    cache_key = f"air_pollution:{lat:.2f},{lon:.2f}"
    cache = load_cache(AIR_POLLUTION_CACHE)
    
    # Check cache first
    if cache_key in cache and is_cache_valid(cache[cache_key]):
        print("üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞")
        return cache[cache_key]['data']
    
    # Make API request
    url = f"https://api.openweathermap.org/data/2.5/air_pollution?lat={lat}&lon={lon}&appid={OPENWEATHER_API_KEY}"
    success, data = make_api_request_with_retry(url)    
    if not success:
        # Try to use cache if API fails
        if cache_key in cache:
            print("üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞:")
            return cache[cache_key]['data']
        return data
    
    if not data or len(data) == 0:
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–∏ –≤–æ–∑–¥—É—Ö–∞"}
    
    # Save to cache
    cache[cache_key] = {
        "lat": lat,
        "lon": lon,
        "fetched_at": datetime.now().isoformat(),
        "data": data
    }
    save_cache(cache, AIR_POLLUTION_CACHE)
    
    return data

def get_air_pollution_by_city(city: str) -> Dict:
    """Get air pollution data by city name - first get coordinates, then pollution data."""
    # Get city coordinates
    coords_data = get_coordinates_by_city(city)
    if "error" in coords_data:
        return coords_data
    
    lat = coords_data.get("lat")
    lon = coords_data.get("lon")
    
    if lat is None or lon is None:
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞"}
    
    # Get air pollution by coordinates
    return get_air_pollution(lat, lon)

def get_air_quality_level(pollutant_type: str, concentration: float) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—è–∑–Ω–∏—Ç–µ–ª—è
    –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∫–∞–ª—ã OpenWeather.
    
    Args:
        pollutant_type (str): –¢–∏–ø –∑–∞–≥—Ä—è–∑–Ω–∏—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "SO2", "PM2.5")
        concentration (float): –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—è–∑–Ω–∏—Ç–µ–ª—è
        
    Returns:
        str: –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    """
    pollutant_type = pollutant_type.upper()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º PM2.5 –≤ PM2_5 –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å AIR_QUALITY_SCALE
    if pollutant_type == "PM2.5":
        pollutant_type = "PM2_5"
    
    for level in AIR_QUALITY_SCALE:
        if pollutant_type in level["pollutants"]:
            min_val, max_val = level["pollutants"][pollutant_type]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [min_val; max_val)
            if min_val <= concentration < max_val:
                return level["name_ru"]
    
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def analyze_air_pollution(data: Dict) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–∏ –≤–æ–∑–¥—É—Ö–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç."""
    if "error" in data:
        return f"‚ùå –û—à–∏–±–∫–∞: {data['error']}"
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–∏
        air_pollution = data.get("list", [])
        if not air_pollution:
            return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–∏ –≤–æ–∑–¥—É—Ö–∞"
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
        latest_data = air_pollution[-1]
        components = latest_data.get("components", {})
        
        if not components:
            return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è"
        
        result = "üå¨Ô∏è –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞:\n\n"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        pollutants = {
            "so2": "–î–∏–æ–∫—Å–∏–¥ —Å–µ—Ä—ã",
            "no2": "–î–∏–æ–∫—Å–∏–¥ –∞–∑–æ—Ç–∞", 
            "pm10": "PM‚ÇÅ‚ÇÄ (–≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã)",
            "pm2_5": "PM‚ÇÇ.‚ÇÖ (–º–µ–ª–∫–∏–µ —á–∞—Å—Ç–∏—Ü—ã)",
            "o3": "–û–∑–æ–Ω",
            "co": "–û–∫—Å–∏–¥ —É–≥–ª–µ—Ä–æ–¥–∞"
        }
        
        result += "<code>"
        for pollutant_code, pollutant_name in pollutants.items():
            concentration = components.get(pollutant_code, 0)
            quality_level = get_air_quality_level(pollutant_code.upper(), concentration)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é
            if pollutant_code == "co":
                # CO –≤ –º–∫–≥/–º¬≥, –Ω–æ –æ–±—ã—á–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤ –º–≥/–º¬≥
                concentration_display = f"{concentration:.1f}"
                unit = "–º–∫–≥/–º¬≥"
            else:
                concentration_display = f"{concentration:.1f}"
                unit = "–º–∫–≥/–º¬≥"
            
            result += f"{pollutant_name:<25}: {concentration_display:<8} {unit:<8} - {quality_level}\n"
        
        # –û–±—â–∏–π –∏–Ω–¥–µ–∫—Å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ (AQI)
        aqi = latest_data.get("main", {}).get("aqi", 0)
        aqi_levels = {1: "–•–æ—Ä–æ—à–µ–µ", 2: "–£–º–µ—Ä–µ–Ω–Ω–æ–µ", 3: "–°—Ä–µ–¥–Ω–µ–µ", 4: "–ü–ª–æ—Ö–æ–µ", 5: "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ"}
        overall_quality = aqi_levels.get(aqi, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        result += f"\nüìä –û–±—â–∏–π –∏–Ω–¥–µ–∫—Å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ (AQI): {aqi} - {overall_quality}"
        result += "</code>"
        
        return result
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}"
# Test functions
if __name__ == "__main__":
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ –≥–æ—Ä–æ–¥—É:")
    result = get_weather_by_city("London")
    print(format_weather_data(result))
    print ("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ —á–∞—Å–∞–º:")
    result = get_hourly_weather_by_city("London")
    print(format_hourly_weather(result))
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è –≤–æ–∑–¥—É—Ö–∞:")
    result = get_air_pollution_by_city("London") 
    print(analyze_air_pollution(result))