"""
–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã, –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
"""

import telebot
from telebot import types
from dotenv import load_dotenv
import os
import logging
import signal
import sys
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from user_manager import user_manager
from notification_scheduler import notification_scheduler
from weather import (
    get_weather_by_city, 
    get_hourly_weather_by_city, 
    get_air_pollution_by_city,
    get_daily_weather_by_city,
    get_cities_list,
    get_weather_by_coordinates,
    get_hourly_weather,
    get_daily_weather,
    get_air_pollution,
    format_weather_data, 
    format_hourly_weather, 
    format_daily_weather,
    analyze_air_pollution,
    COUNT_DAILY_FORECAST,
    COUNT_3_HOURS_FORECAST
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not BOT_TOKEN:
    logger.error("‚ùå –û—à–∏–±–∫–∞: API –∫–ª—é—á telegram –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ:")
    print("TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞")
    sys.exit(1)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_scheduler.set_bot_instance(bot)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
city_selection_data = {}


def create_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    
    weather_btn = types.InlineKeyboardButton("üå§Ô∏è –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞", callback_data="weather_current")
    forecast_btn = types.InlineKeyboardButton("üìÖ –ü—Ä–æ–≥–Ω–æ–∑", callback_data="weather_daily")
    hourly_btn = types.InlineKeyboardButton("‚è∞ –ü–æ—á–∞—Å–æ–≤–æ–π", callback_data="weather_hourly")
    air_btn = types.InlineKeyboardButton("üå¨Ô∏è –í–æ–∑–¥—É—Ö", callback_data="weather_air")
    settings_btn = types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
    help_btn = types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
    
    keyboard.add(weather_btn, forecast_btn)
    keyboard.add(hourly_btn, air_btn)
    keyboard.add(settings_btn, help_btn)
    
    return keyboard


def create_settings_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    city_btn = types.InlineKeyboardButton("üèôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="change_city")
    notifications_btn = types.InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notification_settings")
    frequency_btn = types.InlineKeyboardButton("‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É", callback_data="frequency_settings")
    forecast_count_btn = types.InlineKeyboardButton("üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞", callback_data="forecast_settings")
    back_btn = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    
    keyboard.add(city_btn, notifications_btn, frequency_btn, forecast_count_btn, back_btn)
    
    return keyboard


def create_frequency_settings_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Å—Ç–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —á–∞—Å—Ç–æ—Ç—ã
    fixed_time_btn = types.InlineKeyboardButton("üïê –ó–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è", callback_data="frequency_fixed_time")
    interval_btn = types.InlineKeyboardButton("‚è±Ô∏è –ö–∞–∂–¥—ã–µ –• —á–∞—Å–æ–≤", callback_data="frequency_interval")
    
    keyboard.add(fixed_time_btn, interval_btn)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    back_btn = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")
    keyboard.add(back_btn)
    
    return keyboard


def create_forecast_settings_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞."""
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    count_8_btn = types.InlineKeyboardButton("8 (24—á)", callback_data="forecast_count_8")
    count_16_btn = types.InlineKeyboardButton("16 (48—á)", callback_data="forecast_count_16")
    count_24_btn = types.InlineKeyboardButton("24 (72—á)", callback_data="forecast_count_24")
    count_40_btn = types.InlineKeyboardButton("40 (120—á)", callback_data="forecast_count_40")
    
    keyboard.add(count_8_btn, count_16_btn, count_24_btn, count_40_btn)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    back_btn = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")
    keyboard.add(back_btn)
    
    return keyboard


def create_city_selection_keyboard(cities_data):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞."""
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    for i, city_info in enumerate(cities_data["cities"]):
        button_text = f"{i+1}. {city_info['display_name']}"
        callback_data = f"select_city_{i}"
        button = types.InlineKeyboardButton(button_text, callback_data=callback_data)
        keyboard.add(button)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    cancel_btn = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_city_selection")
    keyboard.add(cancel_btn)
    
    return keyboard


def create_notification_keyboard(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    user_data = user_manager.get_user_data(user_id)
    notifications_enabled = user_data.get("notifications_enabled", False) if user_data else False
    
    toggle_text = "üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" if notifications_enabled else "üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    toggle_btn = types.InlineKeyboardButton(toggle_text, callback_data="toggle_notifications")
    
    times_btn = types.InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="change_notification_times")
    back_btn = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")
    
    keyboard.add(toggle_btn, times_btn, back_btn)
    
    return keyboard


def ensure_user_exists(user_id):
    """–£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ."""
    if not user_manager.get_user_data(user_id):
        user_manager.add_user(user_id)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")


@bot.message_handler(commands=['start'])
def handle_start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = message.from_user.id
    ensure_user_exists(user_id)
    
    welcome_text = f"""
üå§Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Weather Bot!

–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! 

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ –º–∏—Ä–∞.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {COUNT_DAILY_FORECAST} –¥–Ω–µ–π
‚Ä¢ –ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ {COUNT_3_HOURS_FORECAST} —á–∞—Å–æ–≤
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:
"""
    
    bot.send_message(
        user_id, 
        welcome_text, 
        reply_markup=create_main_keyboard()
    )
    
    user_manager.update_last_activity(user_id)


@bot.message_handler(commands=['help'])
def handle_help(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = f"""
‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/weather [–≥–æ—Ä–æ–¥] - –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
/forecast [–≥–æ—Ä–æ–¥] - –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {COUNT_DAILY_FORECAST} –¥–Ω–µ–π  
/hourly [–≥–æ—Ä–æ–¥] - –ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ {COUNT_3_HOURS_FORECAST} —á–∞—Å–æ–≤
/air [–≥–æ—Ä–æ–¥] - –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞
/setcity [–≥–æ—Ä–æ–¥] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
/notifications - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° –°–æ–≤–µ—Ç: –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤–∞—à –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.
"""
    
    bot.send_message(message.from_user.id, help_text)


@bot.message_handler(commands=['weather'])
def handle_weather_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /weather."""
    user_id = message.from_user.id
    ensure_user_exists(user_id)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    command_parts = message.text.split(' ', 1)
    city = command_parts[1] if len(command_parts) > 1 else None
    
    if not city:
        city = user_manager.get_user_city(user_id)
        if not city:
            bot.send_message(user_id, "‚ùå –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setcity [–≥–æ—Ä–æ–¥]")
            return
    
    handle_city_search(user_id, city, "current")


@bot.message_handler(commands=['forecast'])
def handle_forecast_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /forecast."""
    user_id = message.from_user.id
    ensure_user_exists(user_id)
    
    command_parts = message.text.split(' ', 1)
    city = command_parts[1] if len(command_parts) > 1 else None
    
    if not city:
        city = user_manager.get_user_city(user_id)
        if not city:
            bot.send_message(user_id, "‚ùå –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setcity [–≥–æ—Ä–æ–¥]")
            return
    
    handle_city_search(user_id, city, "forecast")


@bot.message_handler(commands=['hourly'])
def handle_hourly_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /hourly."""
    user_id = message.from_user.id
    ensure_user_exists(user_id)
    
    command_parts = message.text.split(' ', 1)
    city = command_parts[1] if len(command_parts) > 1 else None
    
    if not city:
        city = user_manager.get_user_city(user_id)
        if not city:
            bot.send_message(user_id, "‚ùå –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setcity [–≥–æ—Ä–æ–¥]")
            return
    
    handle_city_search(user_id, city, "hourly")


@bot.message_handler(commands=['air'])
def handle_air_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /air."""
    user_id = message.from_user.id
    ensure_user_exists(user_id)
    
    command_parts = message.text.split(' ', 1)
    city = command_parts[1] if len(command_parts) > 1 else None
    
    if not city:
        city = user_manager.get_user_city(user_id)
        if not city:
            bot.send_message(user_id, "‚ùå –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setcity [–≥–æ—Ä–æ–¥]")
            return
    
    handle_city_search(user_id, city, "air")


@bot.message_handler(commands=['setcity'])
def handle_setcity_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setcity."""
    user_id = message.from_user.id
    ensure_user_exists(user_id)
    
    command_parts = message.text.split(' ', 1)
    if len(command_parts) < 2:
        bot.send_message(user_id, "‚ùå –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥. –ü—Ä–∏–º–µ—Ä: /setcity –ú–æ—Å–∫–≤–∞")
        return
    
    city = command_parts[1].strip()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
    city_selection_data[user_id] = {
        "city_query": city,
        "weather_type": "set_city",  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞
        "cities": []
    }
    
    handle_city_search(user_id, city, "set_city")


@bot.message_handler(commands=['notifications'])
def handle_notifications_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /notifications."""
    user_id = message.from_user.id
    ensure_user_exists(user_id)
    
    user_data = user_manager.get_user_data(user_id)
    notifications_enabled = user_data.get("notifications_enabled", False)
    notification_times = user_data.get("notification_times", ["08:00", "18:00"])
    
    status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if notifications_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    times_text = ", ".join(notification_times)
    
    text = f"""
üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:

–°—Ç–∞—Ç—É—Å: {status_text}
–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {times_text}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:
"""
    
    bot.send_message(
        user_id, 
        text, 
        reply_markup=create_notification_keyboard(user_id)
    )


@bot.message_handler(commands=['regular'])
def handle_regular_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /regular –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    user_id = message.from_user.id
    ensure_user_exists(user_id)
    
    command_parts = message.text.split()
    
    if len(command_parts) != 4:
        help_text = """
üïê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
/regular <–Ω–∞—á–∞–ª—å–Ω—ã–π_—á–∞—Å> <–∫–æ–Ω–µ—á–Ω—ã–π_—á–∞—Å> <–∏–Ω—Ç–µ—Ä–≤–∞–ª_—á–∞—Å–æ–≤>

–ü—Ä–∏–º–µ—Ä—ã:
/regular 10 22 2    - –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ —Å 10:00 –¥–æ 22:00
/regular 8 20 4     - –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ —Å 8:00 –¥–æ 20:00
/regular 9 18 3     - –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ —Å 9:00 –¥–æ 18:00

–ß–∞—Å—ã —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 24 —á–∞—Å–∞ (0-23)
"""
        bot.send_message(user_id, help_text)
        return
    
    try:
        start_hour = int(command_parts[1])
        end_hour = int(command_parts[2])
        interval_hours = int(command_parts[3])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not (0 <= start_hour <= 23 and 0 <= end_hour <= 23):
            bot.send_message(user_id, "‚ùå –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23")
            return
            
        if start_hour >= end_hour:
            bot.send_message(user_id, "‚ùå –ù–∞—á–∞–ª—å–Ω—ã–π —á–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ")
            return
            
        if interval_hours < 1 or interval_hours > 12:
            bot.send_message(user_id, "‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 12 —á–∞—Å–æ–≤")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if notification_scheduler.add_regular_notification(user_id, start_hour, end_hour, interval_hours):
            times_list = []
            current_hour = start_hour
            while current_hour <= end_hour:
                times_list.append(f"{current_hour:02d}:00")
                current_hour += interval_hours
            
            times_text = ", ".join(times_list)
            bot.send_message(
                user_id, 
                f"‚úÖ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!\n\n"
                f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {times_text}\n"
                f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {interval_hours} —á–∞—Å–∞(–æ–≤)\n"
                f"–î–∏–∞–ø–∞–∑–æ–Ω: {start_hour:02d}:00 - {end_hour:02d}:00"
            )
        else:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            
    except ValueError:
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 0 –¥–æ 23")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /regular: {e}")
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")


def send_weather_info(user_id, city, weather_type, lat=None, lon=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_msg = bot.send_message(user_id, f"üå§Ô∏è –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {city}...")
        
        if weather_type == "current":
            if lat and lon:
                weather_data = get_weather_by_coordinates(lat, lon)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, —Ç–æ –ø–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞. –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞.
                cities_data = get_cities_list(city)
                if "error" in cities_data:
                    message = f"‚ùå –û—à–∏–±–∫–∞: {cities_data['error']}"
                    return
                weather_data = get_weather_by_coordinates(cities_data["cities"][0]["lat"], cities_data["cities"][0]["lon"])
            if "error" in weather_data:
                message = f"‚ùå –û—à–∏–±–∫–∞: {weather_data['error']}"
            else:
                message = f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {city}\n\n{format_weather_data(weather_data)}"
        
        elif weather_type == "forecast":
            if lat and lon:
                weather_data = get_daily_weather(lat, lon)
            else:
                weather_data = get_daily_weather_by_city(city)
            if "error" in weather_data:
                message = f"‚ùå –û—à–∏–±–∫–∞: {weather_data['error']}"
            else:
                message = f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {city}\n\n{format_daily_weather(weather_data)}"
        
        elif weather_type == "hourly":
            if lat and lon:
                weather_data = get_hourly_weather(lat, lon)
            else:
                weather_data = get_hourly_weather_by_city(city)
            if "error" in weather_data:
                message = f"‚ùå –û—à–∏–±–∫–∞: {weather_data['error']}"
            else:
                message = f"‚è∞ –ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {city}\n\n{format_hourly_weather(weather_data)}"
        
        elif weather_type == "air":
            if lat and lon:
                weather_data = get_air_pollution(lat, lon)
            else:
                weather_data = get_air_pollution_by_city(city)
            if "error" in weather_data:
                message = f"‚ùå –û—à–∏–±–∫–∞: {weather_data['error']}"
            else:
                message = f"üå¨Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –≤ {city}\n\n{analyze_air_pollution(weather_data)}"
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        bot.delete_message(user_id, loading_msg.message_id)
        bot.send_message(user_id, message, reply_markup=create_main_keyboard(), parse_mode='HTML')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_manager.update_last_activity(user_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ")


def handle_city_search(user_id, city_query, weather_type):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
        cities_data = get_cities_list(city_query)
        
        if "error" in cities_data:
            bot.send_message(user_id, f"‚ùå {cities_data['error']}")
            return
        
        cities = cities_data["cities"]
        
        if len(cities) == 1:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≥–æ—Ä–æ–¥
            if weather_type == "set_city":
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                city_name = cities[0]['display_name']
                if user_manager.update_user_city(user_id, city_name):
                    bot.send_message(user_id, f"‚úÖ –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city_name}", reply_markup=create_settings_keyboard())
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≥–æ—Ä–æ–¥: {city_name}")
                else:
                    bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥–æ—Ä–æ–¥–∞", reply_markup=create_settings_keyboard())
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–≥–æ–¥—É –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                city_info = cities[0]
                send_weather_info(user_id, city_info['display_name'], weather_type, city_info['lat'], city_info['lon'])
        else:
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
            city_selection_data[user_id] = {
                "city_query": city_query,
                "weather_type": weather_type,
                "cities": cities
            }
            
            if weather_type == "set_city":
                message = f"üîé –ù–∞–π–¥–µ–Ω–æ {len(cities)} –≥–æ—Ä–æ–¥–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{city_query}':\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:"
            else:
                message = f"üîé –ù–∞–π–¥–µ–Ω–æ {len(cities)} –≥–æ—Ä–æ–¥–æ–≤ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{city_query}':\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≥–æ—Ä–æ–¥:"
            
            bot.send_message(
                user_id, 
                message, 
                reply_markup=create_city_selection_keyboard(cities_data)
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–∞: {e}")
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞")


@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤."""
    user_id = call.from_user.id
    ensure_user_exists(user_id)
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        if call.data.startswith("select_city_"):
            city_index = int(call.data.split("_")[2])
            
            if user_id in city_selection_data:
                selection_data = city_selection_data[user_id]
                cities = selection_data["cities"]
                weather_type = selection_data["weather_type"]
                
                if 0 <= city_index < len(cities):
                    selected_city = cities[city_index]
                    
                    if weather_type == "set_city":
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        city_name = selected_city['display_name']
                        if user_manager.update_user_city(user_id, city_name):
                            bot.edit_message_text(
                                f"‚úÖ –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city_name}",
                                user_id,
                                call.message.message_id,
                                reply_markup=create_settings_keyboard()
                            )
                            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≥–æ—Ä–æ–¥: {city_name}")
                        else:
                            bot.edit_message_text(
                                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥–æ—Ä–æ–¥–∞",
                                user_id,
                                call.message.message_id,
                                reply_markup=create_settings_keyboard()
                            )
                    else:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                        city_info = selected_city
                        send_weather_info(user_id, city_info['display_name'], weather_type, city_info['lat'], city_info['lon'])
                        bot.delete_message(user_id, call.message.message_id)
                    
                    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±–æ—Ä–∞
                    del city_selection_data[user_id]
                else:
                    bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞")
            else:
                bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        elif call.data == "cancel_city_selection":
            if user_id in city_selection_data:
                del city_selection_data[user_id]
            bot.edit_message_text(
                "‚ùå –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω",
                user_id,
                call.message.message_id
            )
        
        elif call.data == "weather_current":
            city = user_manager.get_user_city(user_id)
            if city:
                handle_city_search(user_id, city, "current")
            else:
                bot.send_message(user_id, "‚ùå –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setcity [–≥–æ—Ä–æ–¥]")
        
        elif call.data == "weather_forecast":
            city = user_manager.get_user_city(user_id)
            if city:
                handle_city_search(user_id, city, "forecast")
            else:
                bot.send_message(user_id, "‚ùå –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setcity [–≥–æ—Ä–æ–¥]")
        
        elif call.data == "weather_forecast":
            city = user_manager.get_user_city(user_id)
            if city:
                handle_city_search(user_id, city, "forecast")
            else:
                bot.send_message(user_id, "‚ùå –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setcity [–≥–æ—Ä–æ–¥]")
        
        elif call.data == "weather_daily":
            city = user_manager.get_user_city(user_id)
            if city:
                handle_city_search(user_id, city, "forecast")
            else:
                bot.send_message(user_id, "‚ùå –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setcity [–≥–æ—Ä–æ–¥]")
        
        elif call.data == "weather_hourly":
            city = user_manager.get_user_city(user_id)
            if city:
                handle_city_search(user_id, city, "hourly")
            else:
                bot.send_message(user_id, "‚ùå –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setcity [–≥–æ—Ä–æ–¥]")
        
        elif call.data == "weather_air":
            city = user_manager.get_user_city(user_id)
            if city:
                handle_city_search(user_id, city, "air")
            else:
                bot.send_message(user_id, "‚ùå –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setcity [–≥–æ—Ä–æ–¥]")
        
        elif call.data == "settings":
            bot.edit_message_text(
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                user_id,
                call.message.message_id,
                reply_markup=create_settings_keyboard()
            )
        
        elif call.data == "change_city":
            bot.send_message(user_id, "üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:")
            bot.register_next_step_handler(call.message, process_city_input_for_settings)
        
        elif call.data == "notification_settings":
            user_data = user_manager.get_user_data(user_id)
            notifications_enabled = user_data.get("notifications_enabled", False)
            notification_times = user_data.get("notification_times", ["08:00", "18:00"])
            
            status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if notifications_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
            times_text = ", ".join(notification_times)
            
            text = f"""
üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:

–°—Ç–∞—Ç—É—Å: {status_text}
–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {times_text}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:
"""
            
            bot.edit_message_text(
                text,
                user_id,
                call.message.message_id,
                reply_markup=create_notification_keyboard(user_id)
            )
        
        elif call.data == "forecast_settings":
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º COUNT_3_HOURS_FORECAST –∏–∑ weather –º–æ–¥—É–ª—è
            from weather import COUNT_3_HOURS_FORECAST
            
            text = f"""
üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞:

–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 3-—á–∞—Å–æ–≤—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤: {COUNT_3_HOURS_FORECAST}
–û–±—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {COUNT_3_HOURS_FORECAST * 3} —á–∞—Å–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤:
‚Ä¢ 8 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ = 24 —á–∞—Å–∞ (1 –¥–µ–Ω—å)
‚Ä¢ 16 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ = 48 —á–∞—Å–æ–≤ (2 –¥–Ω—è)  
‚Ä¢ 24 –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ = 72 —á–∞—Å–∞ (3 –¥–Ω—è)
‚Ä¢ 40 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ = 120 —á–∞—Å–æ–≤ (5 –¥–Ω–µ–π)
"""
            
            bot.edit_message_text(
                text,
                user_id,
                call.message.message_id,
                reply_markup=create_forecast_settings_keyboard()
            )
        
        elif call.data.startswith("forecast_count_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            count_str = call.data.split("_")[2]
            try:
                new_count = int(count_str)
                # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ weather –º–æ–¥—É–ª–µ
                import weather
                weather.COUNT_3_HOURS_FORECAST = new_count
                
                bot.edit_message_text(
                    f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_count} –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ ({new_count * 3} —á–∞—Å–æ–≤)",
                    user_id,
                    call.message.message_id,
                    reply_markup=create_settings_keyboard()
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ {new_count}")
            except ValueError:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        elif call.data.startswith("forecast_count_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            count_str = call.data.split("_")[2]
            try:
                new_count = int(count_str)
                # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ weather –º–æ–¥—É–ª–µ
                import weather
                weather.COUNT_3_HOURS_FORECAST = new_count
                
                bot.edit_message_text(
                    f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_count} –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ ({new_count * 3} —á–∞—Å–æ–≤)",
                    user_id,
                    call.message.message_id,
                    reply_markup=create_settings_keyboard()
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞ {new_count}")
            except ValueError:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        elif call.data == "frequency_settings":
            text = """
‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å—Ç–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —á–∞—Å—Ç–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:

üïê –ó–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 08:00, 18:00)
‚è±Ô∏è –ö–∞–∂–¥—ã–µ –• —á–∞—Å–æ–≤ - —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
"""
            
            bot.edit_message_text(
                text,
                user_id,
                call.message.message_id,
                reply_markup=create_frequency_settings_keyboard()
            )
        
        elif call.data == "frequency_fixed_time":
            bot.send_message(
                user_id,
                "üïê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /notifications –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n"
                "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 08:00,18:00)"
            )
            bot.register_next_step_handler(call.message, process_fixed_time_input)
        
        elif call.data == "frequency_interval":
            bot.send_message(
                user_id,
                "‚è±Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /regular –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤\n"
                "–§–æ—Ä–º–∞—Ç: /regular <–Ω–∞—á–∞–ª—å–Ω—ã–π_—á–∞—Å> <–∫–æ–Ω–µ—á–Ω—ã–π_—á–∞—Å> <–∏–Ω—Ç–µ—Ä–≤–∞–ª_—á–∞—Å–æ–≤>\n\n"
                "–ü—Ä–∏–º–µ—Ä: /regular 10 22 2 (–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ —Å 10:00 –¥–æ 22:00)"
            )
        
        elif call.data == "toggle_notifications":
            user_data = user_manager.get_user_data(user_id)
            current_status = user_data.get("notifications_enabled", False)
            new_status = not current_status
            
            if user_manager.update_notification_settings(user_id, new_status):
                status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
                bot.answer_callback_query(call.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text}")
                
                # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                notification_scheduler.reschedule_user_notifications(user_id)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                bot.edit_message_reply_markup(
                    user_id,
                    call.message.message_id,
                    reply_markup=create_notification_keyboard(user_id)
                )
            else:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        elif call.data == "change_notification_times":
            bot.send_message(user_id, "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 08:00,18:00):")
            bot.register_next_step_handler(call.message, process_notification_times_input)
        
        elif call.data == "back_to_main":
            bot.edit_message_text(
                "üå§Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                user_id,
                call.message.message_id,
                reply_markup=create_main_keyboard()
            )
        
        elif call.data == "help":
            help_text = """
ü§ñ Weather Bot - –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–≥–æ–¥–µ

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/weather [–≥–æ—Ä–æ–¥] - –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
/forecast [–≥–æ—Ä–æ–¥] - –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π
/hourly [–≥–æ—Ä–æ–¥] - –ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑
/air [–≥–æ—Ä–æ–¥] - –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞
/setcity [–≥–æ—Ä–æ–¥] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
/notifications - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/regular - –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/help - –°–ø—Ä–∞–≤–∫–∞

üí° –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã!

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É - –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:
  üïê –ó–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (08:00, 18:00)
  ‚è±Ô∏è –ö–∞–∂–¥—ã–µ –• —á–∞—Å–æ–≤ (/regular 10 22 2)
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (8-40)

üïê –†–µ–≥—É–ª—è—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
/regular 10 22 2 - –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ —Å 10:00 –¥–æ 22:00

üåê –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è OpenWeatherMap
"""
            bot.edit_message_text(
                help_text,
                user_id,
                call.message.message_id,
                reply_markup=create_main_keyboard()
            )
        
        elif call.data == "back_to_settings":
            bot.edit_message_text(
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                user_id,
                call.message.message_id,
                reply_markup=create_settings_keyboard()
            )
        
        elif call.data == "help":
            help_text = """
‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/weather [–≥–æ—Ä–æ–¥] - –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞
/forecast [–≥–æ—Ä–æ–¥] - –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π  
/hourly [–≥–æ—Ä–æ–¥] - –ü–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑
/air [–≥–æ—Ä–æ–¥] - –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞
/setcity [–≥–æ—Ä–æ–¥] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
/notifications - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üí° –°–æ–≤–µ—Ç: –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤–∞—à –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.
"""
            bot.send_message(user_id, help_text)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
        bot.answer_callback_query(call.id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


def process_city_input_for_settings(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."""
    user_id = message.from_user.id
    city = message.text.strip()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
    city_selection_data[user_id] = {
        "city_query": city,
        "weather_type": "set_city",  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞
        "cities": []
    }
    
    handle_city_search(user_id, city, "set_city")


def process_city_input(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    user_id = message.from_user.id
    city = message.text.strip()
    
    if user_manager.update_user_city(user_id, city):
        bot.send_message(user_id, f"‚úÖ –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≥–æ—Ä–æ–¥: {city}")
    else:
        bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥–æ—Ä–æ–¥–∞")


def process_fixed_time_input(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    user_id = message.from_user.id
    ensure_user_exists(user_id)
    
    try:
        time_input = message.text.strip()
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç: HH:MM,HH:MM –∏–ª–∏ HH:MM HH:MM)
        times = []
        for time_str in time_input.replace(',', ' ').split():
            time_str = time_str.strip()
            if ':' in time_str:
                hour, minute = time_str.split(':')
                hour = int(hour)
                minute = int(minute)
                
                if 0 <= hour <= 23 and 0 <= minute <= 59:
                    times.append(f"{hour:02d}:{minute:02d}")
                else:
                    bot.send_message(user_id, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {time_str}. –ß–∞—Å—ã: 0-23, –º–∏–Ω—É—Ç—ã: 0-59")
                    return
            else:
                bot.send_message(user_id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {time_str}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM")
                return
        
        if not times:
            bot.send_message(user_id, "‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_manager.update_notification_settings(user_id, True, times):
            times_text = ", ".join(times)
            bot.send_message(
                user_id,
                f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ –≤—Ä–µ–º—è: {times_text}",
                reply_markup=create_settings_keyboard()
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {times_text}")
            
            # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_scheduler.schedule_notifications()
        else:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            
    except ValueError:
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏")


def process_notification_times_input(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    user_id = message.from_user.id
    times_text = message.text.strip()
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º–µ–Ω–∞
        times = [time.strip() for time in times_text.split(',')]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        for time_str in times:
            try:
                datetime.strptime(time_str, "%H:%M")
            except ValueError:
                bot.send_message(user_id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {time_str}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM")
                return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if user_manager.update_notification_settings(user_id, True, times):
            times_display = ", ".join(times)
            bot.send_message(user_id, f"‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {times_display}")
            
            # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_scheduler.reschedule_user_notifications(user_id)
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {times}")
        else:
            bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏")


@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = message.from_user.id
    ensure_user_exists(user_id)
    
    send_weather_info(user_id, message.text.strip(), "current")
    return


def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown."""
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
    notification_scheduler.stop_scheduler()
    sys.exit(0)


@bot.message_handler(func=lambda message: True)
def handle_text_message(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞."""
    user_id = message.from_user.id
    ensure_user_exists(user_id)
    
    city_query = message.text.strip()
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏)
    if city_query.startswith('/'):
        return
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    if len(city_query) < 2:
        bot.send_message(user_id, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
        cities_data = get_cities_list(city_query)
        
        if "error" in cities_data:
            bot.send_message(user_id, f"‚ùå {cities_data['error']}")
            return
        
        cities = cities_data["cities"]
        
        if len(cities) == 0:
            bot.send_message(user_id, f"‚ùå –ì–æ—Ä–æ–¥ '{city_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            return
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞
        selected_city = cities[0]
        city_name = selected_city['display_name']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        send_weather_info(user_id, city_name, "current", selected_city['lat'], selected_city['lon'])
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city_name}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    logger.info("–ó–∞–ø—É—Å–∫ Weather Bot...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_scheduler.start_scheduler()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        notification_scheduler.stop_scheduler()


if __name__ == "__main__":
    main()